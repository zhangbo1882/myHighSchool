!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CC	networkTest/Makefile	/^CC = gcc$/;"	m
CC	pcap/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -g -w -D$(MACRO)$/;"	m
CFLAGS	networkTest/Makefile	/^CFLAGS := -g -w -D$(MACRO)$/;"	m
CFLAGS	pcap/Makefile	/^CFLAGS := -g -w -D$(MACRO)$/;"	m
DST	networkTest/start.c	/^#define DST /;"	d	file:
ETHER_HDR_SIZE	pcap/pcapDump.c	/^#define ETHER_HDR_SIZE /;"	d	file:
ETH_DST_OFFSIZE	pcap/pcapDump.c	/^#define ETH_DST_OFFSIZE /;"	d	file:
ETH_SRC_OFFSIZE	pcap/pcapDump.c	/^#define ETH_SRC_OFFSIZE /;"	d	file:
ETH_TYPE_OFFSIZE	pcap/pcapDump.c	/^#define ETH_TYPE_OFFSIZE /;"	d	file:
EXE	pcap/Makefile	/^EXE	= hadump$/;"	m
FALSE	pcap/pcap.h	/^#define	FALSE	/;"	d
HA_ADMIN_NAME_SIZE	pcap/ha.h	/^#define HA_ADMIN_NAME_SIZE /;"	d
HA_ADMIN_PASSWORD_SIZE	pcap/ha.h	/^#define HA_ADMIN_PASSWORD_SIZE /;"	d
HA_RANDOMSTRING_SIZE	pcap/ha.h	/^#define HA_RANDOMSTRING_SIZE /;"	d
HA_SVRRP_TYPE	pcap/ha.h	/^#define HA_SVRRP_TYPE	/;"	d
HA_SYNC_TYPE	pcap/ha.h	/^#define HA_SYNC_TYPE	/;"	d
HA_TLV_TYPE_CORE_UTIL	pcap/ha.h	/^	HA_TLV_TYPE_CORE_UTIL,$/;"	e	enum:HaHbTlVType
HA_TLV_TYPE_LICENSE_INFO	pcap/ha.h	/^	HA_TLV_TYPE_LICENSE_INFO = 1,$/;"	e	enum:HaHbTlVType
HA_TLV_TYPE_SVRRP_INFO	pcap/ha.h	/^	HA_TLV_TYPE_SVRRP_INFO$/;"	e	enum:HaHbTlVType
HA_TYPE	pcap/ha.h	/^#define HA_TYPE	/;"	d
HaHbTlVType	pcap/ha.h	/^typedef enum HaHbTlVType$/;"	g
HaHbTlvType	pcap/ha.h	/^} HaHbTlvType;$/;"	t	typeref:enum:HaHbTlVType
HaShapHeader	pcap/ha.h	/^typedef struct HaShapHeader$/;"	s
HaShapHeader	pcap/ha.h	/^}__attribute__((packed)) HaShapHeader;$/;"	t	typeref:struct:HaShapHeader
HaShapHeartbeatBase	pcap/ha.h	/^typedef struct HaShapHeartbeatBase$/;"	s
HaShapHeartbeatBase	pcap/ha.h	/^}__attribute__((packed)) HaShapHeartbeatBase;$/;"	t	typeref:struct:HaShapHeartbeatBase
IFNAMESIZE	networkTest/start.c	/^#define IFNAMESIZE /;"	d	file:
IPFORMAT	pcap/pcapDump.c	/^#define IPFORMAT /;"	d	file:
IPPARAM	pcap/pcapDump.c	/^#define IPPARAM(/;"	d	file:
List	list.h	/^}List;$/;"	t	typeref:struct:_list
MACFORMAT	pcap/pcapDump.c	/^#define MACFORMAT	/;"	d	file:
MACPARAM	pcap/pcapDump.c	/^#define MACPARAM(/;"	d	file:
MACRO	Makefile	/^MACRO := DEBUGALL$/;"	m
MACRO	networkTest/Makefile	/^MACRO := DEBUGALL$/;"	m
MACRO	pcap/Makefile	/^MACRO := DEBUGALL$/;"	m
MAX_ETH_FRAME	pcap/pcapParse.c	/^#define MAX_ETH_FRAME /;"	d	file:
MAX_HA_STATE	pcap/ha.h	/^#define MAX_HA_STATE	/;"	d
MAX_HA_TYPE	pcap/ha.h	/^#define MAX_HA_TYPE	/;"	d
MAX_HA_TYPE	pcap/pcapDump.c	/^#define MAX_HA_TYPE	/;"	d	file:
MAX_HA_TYPE	pcap/pcapParse.c	/^#define MAX_HA_TYPE	/;"	d	file:
OBJS	Makefile	/^OBJS = $(patsubst %.c, %.o,$(SOURCES))  $/;"	m
OBJS	networkTest/Makefile	/^OBJS = $(patsubst %.c, %.o,$(SOURCES))  $/;"	m
OBJS	pcap/Makefile	/^OBJS = $(patsubst %.c, %.o,$(SOURCES))  $/;"	m
PCAP_FILE_MAGIC	pcap/pcapParse.c	/^#define PCAP_FILE_MAGIC /;"	d	file:
Queue	queue.h	/^typedef List Queue;$/;"	t
SHAP_AUTHDATA_OFFSET	pcap/ha.h	/^#define SHAP_AUTHDATA_OFFSET	/;"	d
SHAP_AUTHDATA_SIZE	pcap/ha.h	/^#define SHAP_AUTHDATA_SIZE	/;"	d
SHAP_CA_BLOCK_NUM_OFFSET	pcap/ha.h	/^#define SHAP_CA_BLOCK_NUM_OFFSET	/;"	d
SHAP_CA_DATA_OFFSET	pcap/ha.h	/^#define SHAP_CA_DATA_OFFSET	/;"	d
SHAP_CA_ERROR_CODE_OFFSET	pcap/ha.h	/^#define SHAP_CA_ERROR_CODE_OFFSET	/;"	d
SHAP_CA_RESULT_CODE_OFFSET	pcap/ha.h	/^#define SHAP_CA_RESULT_CODE_OFFSET	/;"	d
SHAP_CA_TYPE_ACK	pcap/ha.h	/^#define SHAP_CA_TYPE_ACK	/;"	d
SHAP_CA_TYPE_HTTP_POST	pcap/ha.h	/^#define SHAP_CA_TYPE_HTTP_POST	/;"	d
SHAP_CA_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_CA_TYPE_OFFSET	/;"	d
SHAP_CA_TYPE_PREFERENCES	pcap/ha.h	/^#define SHAP_CA_TYPE_PREFERENCES	/;"	d
SHAP_CA_TYPE_SYNC_RECORD	pcap/ha.h	/^#define SHAP_CA_TYPE_SYNC_RECORD	/;"	d
SHAP_CF_ACK_PACKET_NUM	pcap/ha.h	/^#define SHAP_CF_ACK_PACKET_NUM	/;"	d
SHAP_CF_BLOCK_APP	pcap/ha.h	/^#define SHAP_CF_BLOCK_APP	/;"	d
SHAP_CF_DATA_OFFSET	pcap/ha.h	/^#define SHAP_CF_DATA_OFFSET	/;"	d
SHAP_CF_DATA_SIZE	pcap/ha.h	/^#define SHAP_CF_DATA_SIZE	/;"	d
SHAP_CF_FREE_BUFFER	pcap/ha.h	/^#define SHAP_CF_FREE_BUFFER	/;"	d
SHAP_CF_HEADER_SIZE	pcap/ha.h	/^#define SHAP_CF_HEADER_SIZE	/;"	d
SHAP_CF_LEFT_BNUM_OFFSET	pcap/ha.h	/^#define SHAP_CF_LEFT_BNUM_OFFSET	/;"	d
SHAP_CF_NUM_PACKET_ACK	pcap/ha.h	/^#define SHAP_CF_NUM_PACKET_ACK	/;"	d
SHAP_CF_PREFERENCES	pcap/ha.h	/^#define SHAP_CF_PREFERENCES	/;"	d
SHAP_CF_SYNC_STATE	pcap/ha.h	/^#define SHAP_CF_SYNC_STATE	/;"	d
SHAP_CF_TYPE_HTTP_POST	pcap/ha.h	/^#define SHAP_CF_TYPE_HTTP_POST	/;"	d
SHAP_CF_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_CF_TYPE_OFFSET	/;"	d
SHAP_CF_TYPE_PREFERENCES	pcap/ha.h	/^#define SHAP_CF_TYPE_PREFERENCES	/;"	d
SHAP_CF_TYPE_SYNC_RECORD	pcap/ha.h	/^#define SHAP_CF_TYPE_SYNC_RECORD	/;"	d
SHAP_CHECKSUM_OFFSET	pcap/ha.h	/^#define SHAP_CHECKSUM_OFFSET	/;"	d
SHAP_CM_GET_LOGIN	pcap/ha.h	/^#define SHAP_CM_GET_LOGIN	/;"	d
SHAP_CM_SEND_HEARTBEAT	pcap/ha.h	/^#define SHAP_CM_SEND_HEARTBEAT	/;"	d
SHAP_CM_SEND_VPNINFO	pcap/ha.h	/^#define SHAP_CM_SEND_VPNINFO	/;"	d
SHAP_CM_STATEFUL_FLUSH	pcap/ha.h	/^#define SHAP_CM_STATEFUL_FLUSH	/;"	d
SHAP_CM_STATEFUL_NOT_ALLOWED	pcap/ha.h	/^#define SHAP_CM_STATEFUL_NOT_ALLOWED	/;"	d
SHAP_CM_STATEFUL_SYNCED	pcap/ha.h	/^#define SHAP_CM_STATEFUL_SYNCED	/;"	d
SHAP_CM_SVRRP_LLB_SYNC	pcap/ha.h	/^#define SHAP_CM_SVRRP_LLB_SYNC	/;"	d
SHAP_CM_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_CM_TYPE_OFFSET	/;"	d
SHAP_COMMAND_SIZE	pcap/ha.h	/^#define SHAP_COMMAND_SIZE	/;"	d
SHAP_COM_REST_SIZE	pcap/ha.h	/^#define SHAP_COM_REST_SIZE	/;"	d
SHAP_CONFIG_ACK_SIZE	pcap/ha.h	/^#define SHAP_CONFIG_ACK_SIZE	/;"	d
SHAP_CONFIG_SIZE	pcap/ha.h	/^#define SHAP_CONFIG_SIZE	/;"	d
SHAP_CR_DATA_LEN_OFFSET	pcap/ha.h	/^#define SHAP_CR_DATA_LEN_OFFSET	/;"	d
SHAP_CR_DATA_OFFSET	pcap/ha.h	/^#define SHAP_CR_DATA_OFFSET	/;"	d
SHAP_CR_DATA_SIZE	pcap/ha.h	/^#define SHAP_CR_DATA_SIZE	/;"	d
SHAP_CR_HEADER_SIZE	pcap/ha.h	/^#define SHAP_CR_HEADER_SIZE	/;"	d
SHAP_CR_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_CR_TYPE_OFFSET	/;"	d
SHAP_FA_BLOCK_NUM_OFFSET	pcap/ha.h	/^#define SHAP_FA_BLOCK_NUM_OFFSET	/;"	d
SHAP_FA_FW_STATUS_OFFSET	pcap/ha.h	/^#define SHAP_FA_FW_STATUS_OFFSET	/;"	d
SHAP_FA_TYPE_ACK	pcap/ha.h	/^#define SHAP_FA_TYPE_ACK	/;"	d
SHAP_FA_TYPE_FIRMWARE	pcap/ha.h	/^#define SHAP_FA_TYPE_FIRMWARE	/;"	d
SHAP_FA_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_FA_TYPE_OFFSET	/;"	d
SHAP_FIND_PEER_SIZE	pcap/ha.h	/^#define SHAP_FIND_PEER_SIZE	/;"	d
SHAP_FIRMWARE_ACK_SIZE	pcap/ha.h	/^#define SHAP_FIRMWARE_ACK_SIZE	/;"	d
SHAP_FIRMWARE_SIZE	pcap/ha.h	/^#define SHAP_FIRMWARE_SIZE	/;"	d
SHAP_FOUND_PEER_SIZE	pcap/ha.h	/^#define SHAP_FOUND_PEER_SIZE	/;"	d
SHAP_FO_FIRMWARE_OFFSET	pcap/ha.h	/^#define SHAP_FO_FIRMWARE_OFFSET	/;"	d
SHAP_FO_HAGROUP_OFFSET	pcap/ha.h	/^#define SHAP_FO_HAGROUP_OFFSET	/;"	d
SHAP_FO_HARDWAREID_OFFSET	pcap/ha.h	/^#define SHAP_FO_HARDWAREID_OFFSET	/;"	d
SHAP_FO_MY_IP_OFFSET	pcap/ha.h	/^#define SHAP_FO_MY_IP_OFFSET	/;"	d
SHAP_FO_MY_MAC_OFFSET	pcap/ha.h	/^#define SHAP_FO_MY_MAC_OFFSET	/;"	d
SHAP_FO_TIMESTAMP_OFFSET	pcap/ha.h	/^#define SHAP_FO_TIMESTAMP_OFFSET	/;"	d
SHAP_FO_VENDORID_OFFSET	pcap/ha.h	/^#define SHAP_FO_VENDORID_OFFSET	/;"	d
SHAP_FP_FIRMWARE_OFFSET	pcap/ha.h	/^#define SHAP_FP_FIRMWARE_OFFSET	/;"	d
SHAP_FP_HAGROUP_OFFSET	pcap/ha.h	/^#define SHAP_FP_HAGROUP_OFFSET	/;"	d
SHAP_FP_HARDWAREID_OFFSET	pcap/ha.h	/^#define SHAP_FP_HARDWAREID_OFFSET	/;"	d
SHAP_FP_HWMODULEINFO_OFFSET	pcap/ha.h	/^#define SHAP_FP_HWMODULEINFO_OFFSET	/;"	d
SHAP_FP_IFNUM_OFFSET	pcap/ha.h	/^#define SHAP_FP_IFNUM_OFFSET	/;"	d
SHAP_FP_ISPRIMARY_OFFSET	pcap/ha.h	/^#define SHAP_FP_ISPRIMARY_OFFSET	/;"	d
SHAP_FP_MY_MAC_OFFSET	pcap/ha.h	/^#define SHAP_FP_MY_MAC_OFFSET	/;"	d
SHAP_FP_MY_SERIAL_OFFSET	pcap/ha.h	/^#define SHAP_FP_MY_SERIAL_OFFSET	/;"	d
SHAP_FP_PEER_MAC_OFFSET	pcap/ha.h	/^#define SHAP_FP_PEER_MAC_OFFSET	/;"	d
SHAP_FP_PEER_SERIAL_OFFSET	pcap/ha.h	/^#define SHAP_FP_PEER_SERIAL_OFFSET	/;"	d
SHAP_FW_ACK_PACKET_NUM	pcap/ha.h	/^#define SHAP_FW_ACK_PACKET_NUM	/;"	d
SHAP_FW_DATA_OFFSET	pcap/ha.h	/^#define SHAP_FW_DATA_OFFSET	/;"	d
SHAP_FW_DATA_SIZE	pcap/ha.h	/^#define SHAP_FW_DATA_SIZE	/;"	d
SHAP_FW_HEADER_SIZE	pcap/ha.h	/^#define SHAP_FW_HEADER_SIZE	/;"	d
SHAP_FW_LEFT_BNUM_OFFSET	pcap/ha.h	/^#define SHAP_FW_LEFT_BNUM_OFFSET	/;"	d
SHAP_FW_NUM_PACKET_ACK	pcap/ha.h	/^#define SHAP_FW_NUM_PACKET_ACK	/;"	d
SHAP_FW_TYPE_FIRMWARE	pcap/ha.h	/^#define SHAP_FW_TYPE_FIRMWARE	/;"	d
SHAP_HB_FIRMWARE_OFFSET	pcap/ha.h	/^#define SHAP_HB_FIRMWARE_OFFSET	/;"	d
SHAP_HB_HAGROUP_OFFSET	pcap/ha.h	/^#define SHAP_HB_HAGROUP_OFFSET	/;"	d
SHAP_HB_HA_FLAGS_OFFSET	pcap/ha.h	/^#define SHAP_HB_HA_FLAGS_OFFSET	/;"	d
SHAP_HB_HIGHTIMESTAMP_OFFSET	pcap/ha.h	/^#define SHAP_HB_HIGHTIMESTAMP_OFFSET	/;"	d
SHAP_HB_HWMODULEINFO_OFFSET	pcap/ha.h	/^#define SHAP_HB_HWMODULEINFO_OFFSET	/;"	d
SHAP_HB_LINKCHG_IFNUM_OFFSET	pcap/ha.h	/^#define SHAP_HB_LINKCHG_IFNUM_OFFSET	/;"	d
SHAP_HB_LINKCHG_STATUS_INFO_OFFSET	pcap/ha.h	/^#define SHAP_HB_LINKCHG_STATUS_INFO_OFFSET	/;"	d
SHAP_HB_MINORVERSION_OFFSET	pcap/ha.h	/^#define SHAP_HB_MINORVERSION_OFFSET	/;"	d
SHAP_HB_NUMTLVS_OFFSET	pcap/ha.h	/^#define SHAP_HB_NUMTLVS_OFFSET	/;"	d
SHAP_HB_PRIORITY_OFFSET	pcap/ha.h	/^#define SHAP_HB_PRIORITY_OFFSET	/;"	d
SHAP_HB_RANDOMNUM_OFFSET	pcap/ha.h	/^#define SHAP_HB_RANDOMNUM_OFFSET	/;"	d
SHAP_HB_STATE_OFFSET	pcap/ha.h	/^#define SHAP_HB_STATE_OFFSET	/;"	d
SHAP_HB_STATUS_OFFSET	pcap/ha.h	/^#define SHAP_HB_STATUS_OFFSET	/;"	d
SHAP_HB_TIMESTAMP_OFFSET	pcap/ha.h	/^#define SHAP_HB_TIMESTAMP_OFFSET	/;"	d
SHAP_HB_UNSTABLE_OFFSET	pcap/ha.h	/^#define SHAP_HB_UNSTABLE_OFFSET	/;"	d
SHAP_HB_VENDORID_OFFSET	pcap/ha.h	/^#define SHAP_HB_VENDORID_OFFSET	/;"	d
SHAP_HEADER_SIZE	pcap/ha.h	/^#define SHAP_HEADER_SIZE	/;"	d
SHAP_HEARTBEAT_BASESIZE	pcap/ha.h	/^#define SHAP_HEARTBEAT_BASESIZE	/;"	d
SHAP_HEARTBEAT_SIZE	pcap/ha.h	/^#define SHAP_HEARTBEAT_SIZE	/;"	d
SHAP_LENGTH_OFFSET	pcap/ha.h	/^#define SHAP_LENGTH_OFFSET	/;"	d
SHAP_SVRRP_NODEID_OFFSET	pcap/ha.h	/^#define SHAP_SVRRP_NODEID_OFFSET	/;"	d
SHAP_TYPE_COMMAND	pcap/ha.h	/^#define SHAP_TYPE_COMMAND	/;"	d
SHAP_TYPE_COM_REST	pcap/ha.h	/^#define SHAP_TYPE_COM_REST	/;"	d
SHAP_TYPE_CONFIG	pcap/ha.h	/^#define SHAP_TYPE_CONFIG	/;"	d
SHAP_TYPE_CONFIG_ACK	pcap/ha.h	/^#define SHAP_TYPE_CONFIG_ACK	/;"	d
SHAP_TYPE_FIND_PEER	pcap/ha.h	/^#define SHAP_TYPE_FIND_PEER	/;"	d
SHAP_TYPE_FIRMWARE	pcap/ha.h	/^#define SHAP_TYPE_FIRMWARE	/;"	d
SHAP_TYPE_FIRMWARE_ACK	pcap/ha.h	/^#define SHAP_TYPE_FIRMWARE_ACK	/;"	d
SHAP_TYPE_FOUND_PEER	pcap/ha.h	/^#define SHAP_TYPE_FOUND_PEER	/;"	d
SHAP_TYPE_HEARTBEAT	pcap/ha.h	/^#define SHAP_TYPE_HEARTBEAT	/;"	d
SHAP_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_TYPE_OFFSET	/;"	d
SHAP_TYPE_SVRRP_FIND_PEER	pcap/ha.h	/^#define SHAP_TYPE_SVRRP_FIND_PEER	/;"	d
SHAP_TYPE_SVRRP_FOUND_PEER	pcap/ha.h	/^#define SHAP_TYPE_SVRRP_FOUND_PEER	/;"	d
SHAP_TYPE_SVRRP_HEARTBEAT	pcap/ha.h	/^#define SHAP_TYPE_SVRRP_HEARTBEAT	/;"	d
SHAP_TYPE_SYNC_DATA	pcap/ha.h	/^#define SHAP_TYPE_SYNC_DATA	/;"	d
SHAP_TYPE_UPGRADE	pcap/ha.h	/^#define SHAP_TYPE_UPGRADE	/;"	d
SHAP_UPGRADE_SIZE	pcap/ha.h	/^#define SHAP_UPGRADE_SIZE	/;"	d
SHAP_UP_DATA_OFFSET	pcap/ha.h	/^#define SHAP_UP_DATA_OFFSET	/;"	d
SHAP_UP_FW_PREF_BACKUP	pcap/ha.h	/^#define SHAP_UP_FW_PREF_BACKUP	/;"	d
SHAP_UP_FW_PREF_DEFAULT	pcap/ha.h	/^#define SHAP_UP_FW_PREF_DEFAULT	/;"	d
SHAP_UP_FW_PREF_NORMAL	pcap/ha.h	/^#define SHAP_UP_FW_PREF_NORMAL	/;"	d
SHAP_UP_FW_TYPE_BACKUP	pcap/ha.h	/^#define SHAP_UP_FW_TYPE_BACKUP	/;"	d
SHAP_UP_FW_TYPE_CURRENT	pcap/ha.h	/^#define SHAP_UP_FW_TYPE_CURRENT	/;"	d
SHAP_UP_FW_TYPE_NEW	pcap/ha.h	/^#define SHAP_UP_FW_TYPE_NEW	/;"	d
SHAP_UP_STATUS_FW_WRONG	pcap/ha.h	/^#define SHAP_UP_STATUS_FW_WRONG	/;"	d
SHAP_UP_STATUS_NEW_FAILURE	pcap/ha.h	/^#define SHAP_UP_STATUS_NEW_FAILURE	/;"	d
SHAP_UP_STATUS_OLD_DEFAULT	pcap/ha.h	/^#define SHAP_UP_STATUS_OLD_DEFAULT	/;"	d
SHAP_UP_STATUS_OLD_SUCCESS	pcap/ha.h	/^#define SHAP_UP_STATUS_OLD_SUCCESS	/;"	d
SHAP_UP_TYPE_OFFSET	pcap/ha.h	/^#define SHAP_UP_TYPE_OFFSET	/;"	d
SHAP_UP_TYPE_REBOOTING	pcap/ha.h	/^#define SHAP_UP_TYPE_REBOOTING	/;"	d
SHAP_UP_TYPE_REBOOT_FAILURE	pcap/ha.h	/^#define SHAP_UP_TYPE_REBOOT_FAILURE	/;"	d
SHAP_UP_TYPE_REBOOT_PEER	pcap/ha.h	/^#define SHAP_UP_TYPE_REBOOT_PEER	/;"	d
SHAP_UP_TYPE_REBOOT_STATUS	pcap/ha.h	/^#define SHAP_UP_TYPE_REBOOT_STATUS	/;"	d
SHAP_UP_TYPE_REBOOT_SUCCESS	pcap/ha.h	/^#define SHAP_UP_TYPE_REBOOT_SUCCESS	/;"	d
SHAP_UP_TYPE_SVRRP_BOOT_FAILURE	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_FAILURE /;"	d
SHAP_UP_TYPE_SVRRP_BOOT_PEER	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_PEER	/;"	d
SHAP_UP_TYPE_SVRRP_BOOT_PEER_ACK1	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_PEER_ACK1	/;"	d
SHAP_UP_TYPE_SVRRP_BOOT_PEER_ACK2	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_PEER_ACK2	/;"	d
SHAP_UP_TYPE_SVRRP_BOOT_STATUS	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_STATUS	/;"	d
SHAP_UP_TYPE_SVRRP_BOOT_SUCCESS	pcap/ha.h	/^#define SHAP_UP_TYPE_SVRRP_BOOT_SUCCESS /;"	d
SHAP_VERSION_OFFSET	pcap/ha.h	/^#define SHAP_VERSION_OFFSET	/;"	d
SHAP_VERS_AUTH_OFFSET	pcap/ha.h	/^#define SHAP_VERS_AUTH_OFFSET	/;"	d
SOURCES	Makefile	/^SOURCES = $(wildcard *.c)$/;"	m
SOURCES	networkTest/Makefile	/^SOURCES = $(wildcard *.c)$/;"	m
SOURCES	pcap/Makefile	/^SOURCES = $(wildcard *.c)$/;"	m
SRVPORT	networkTest/start.c	/^#define SRVPORT /;"	d	file:
SVRRP_FIND_PEER_SIZE	pcap/ha.h	/^#define SVRRP_FIND_PEER_SIZE	/;"	d
SVRRP_FOUND_PEER_SIZE	pcap/ha.h	/^#define SVRRP_FOUND_PEER_SIZE	/;"	d
SVRRP_HEARTBEAT_BASESIZE	pcap/ha.h	/^#define SVRRP_HEARTBEAT_BASESIZE	/;"	d
Stack	stack.h	/^typedef List Stack;$/;"	t
TRUE	pcap/pcap.h	/^#define	TRUE	/;"	d
_DLIST_H_	dList.h	/^#define _DLIST_H_$/;"	d
__DEBUG__H__	debug.h	/^#define __DEBUG__H__$/;"	d
__HA__H__	pcap/ha.h	/^#define __HA__H__$/;"	d
__LIST__H__	list.h	/^#define __LIST__H__$/;"	d
__QUEUE__H__	queue.h	/^#define __QUEUE__H__$/;"	d
__STACK__H__	stack.h	/^#define __STACK__H__$/;"	d
_dListLink	dList.h	/^typedef struct _dListLink$/;"	s
_dListNode	dList.h	/^typedef struct  _dListNode$/;"	s
_list	list.h	/^typedef struct _list$/;"	s
_listNode	list.h	/^typedef struct _listNode$/;"	s
authType	pcap/ha.h	/^		authType:4;$/;"	m	struct:HaShapHeader
authenticationData	pcap/ha.h	/^	uint8	authenticationData[SHAP_AUTHDATA_SIZE];$/;"	m	struct:HaShapHeader
blankVendorId	pcap/ha.h	/^	uint8	blankVendorId; \/*This needs to be blank , for interoperability with hb version 4.0*\/$/;"	m	struct:HaShapHeartbeatBase
bool	pcap/pcap.h	/^typedef int bool;$/;"	t
bool	type.h	/^#define bool /;"	d
bpf_int32	pcap/pcap.h	/^typedef int bpf_int32;$/;"	t
bpf_u_int32	pcap/pcap.h	/^typedef unsigned int  bpf_u_int32;$/;"	t
capture_len	pcap/pcap.h	/^	bpf_u_int32 capture_len;$/;"	m	struct:pcap_header
checksum	pcap/ha.h	/^	uint16	checksum;$/;"	m	struct:HaShapHeader
dListIter	dList.c	/^int dListIter(void *ctx, dListLink *list, dListIterCB fn)$/;"	f
dListIterCB	dList.h	/^typedef void (*dListIterCB)(void *ctx, dListLink *list, dListNode *p);$/;"	t
dListLink	dList.h	/^}dListLink;$/;"	t	typeref:struct:_dListLink
dListLinkDelete	dList.c	/^int dListLinkDelete(dListLink *list, dListNode *p)$/;"	f
dListLinkDeleteHead	dList.c	/^int dListLinkDeleteHead(dListLink *list)$/;"	f
dListLinkDeleteTail	dList.c	/^int dListLinkDeleteTail(dListLink *list)$/;"	f
dListLinkDestroy	dList.c	/^int dListLinkDestroy(dListLink *list)$/;"	f
dListLinkInit	dList.c	/^dListLink *dListLinkInit()$/;"	f
dListLinkInsertB	dList.c	/^int dListLinkInsertB(dListLink *list, dListNode *pos, dListNode *p)$/;"	f
dListLinkInsertF	dList.c	/^int dListLinkInsertF(dListLink *list, dListNode *pos, dListNode *p)$/;"	f
dListLinkInsertHead	dList.c	/^int dListLinkInsertHead(dListLink *list, dListNode *p)$/;"	f
dListLinkInsertTail	dList.c	/^int dListLinkInsertTail(dListLink *list, dListNode *p)$/;"	f
dListLinkPrintData	dList.c	/^void dListLinkPrintData(void *ctx, dListLink *list,dListNode *p)$/;"	f
dListLinkPrintInt	dList.c	/^void dListLinkPrintInt(void *ctx, dListLink *list,dListNode *p)$/;"	f
dListLinkPrintString	dList.c	/^void dListLinkPrintString(void *ctx, dListLink *list,dListNode *p)$/;"	f
dListMax	test.c	/^int dListMax(dListLink *list)$/;"	f
dListNode	dList.h	/^}dListNode;$/;"	t	typeref:struct:_dListNode
dListNodeCreate	dList.c	/^dListNode *dListNodeCreate(void *data)$/;"	f
dListNodeFree	dList.c	/^int dListNodeFree(dListNode *p)$/;"	f
dListTest	test.c	/^void dListTest(void)$/;"	f
data	dList.h	/^	void *data;$/;"	m	struct:_dListNode
data	list.h	/^	void *data;$/;"	m	struct:_listNode
digital	test.c	/^int digital[10] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
dumpHaCommand	pcap/pcapDump.c	/^void dumpHaCommand(void *data, size_t size)$/;"	f
dumpHaCommandResult	pcap/pcapDump.c	/^void dumpHaCommandResult(void *data, size_t size)$/;"	f
dumpHaConfig	pcap/pcapDump.c	/^void dumpHaConfig(void *data, size_t size)$/;"	f
dumpHaConfigAck	pcap/pcapDump.c	/^void dumpHaConfigAck(void *data, size_t size)$/;"	f
dumpHaFindPeer	pcap/pcapDump.c	/^void dumpHaFindPeer(void *data, size_t size)$/;"	f
dumpHaFirmware	pcap/pcapDump.c	/^void dumpHaFirmware(void *data, size_t size)$/;"	f
dumpHaFirmwareAck	pcap/pcapDump.c	/^void dumpHaFirmwareAck(void *data, size_t size)$/;"	f
dumpHaFoundPeer	pcap/pcapDump.c	/^void dumpHaFoundPeer(void *data, size_t size)$/;"	f
dumpHaHeartBeat	pcap/pcapDump.c	/^void dumpHaHeartBeat(void *data, size_t size)$/;"	f
dumpHaPacket	pcap/pcapDump.c	/^void dumpHaPacket(void *data, size_t size, bool verbose)$/;"	f
dumpHaUpgrade	pcap/pcapDump.c	/^void dumpHaUpgrade(void *data, size_t size)$/;"	f
dumpHex	pcap/pcapDump.c	/^void dumpHex(uint8 *data, size_t size)$/;"	f
dumpPacket	pcap/pcapDump.c	/^void dumpPacket(void *data, size_t size, bool verbose)$/;"	f
dumpPcapFileHeader	pcap/pcapDump.c	/^void dumpPcapFileHeader(pcap_file_header *pfh)$/;"	f
dumpPcapHeader	pcap/pcapDump.c	/^void dumpPcapHeader(pcap_header *ph)$/;"	f
false	type.h	/^#define false /;"	d
findMax	test.c	/^void findMax(void *ctx, dListLink *list, dListNode *p)$/;"	f
firmware	pcap/ha.h	/^	uint32	firmware;$/;"	m	struct:HaShapHeartbeatBase
haCommandTypeMap	pcap/pcapDump.c	/^char *haCommandTypeMap[10]={$/;"	v
haConfigAckTypeMap	pcap/pcapDump.c	/^char *haConfigAckTypeMap[5]={$/;"	v
haConfigTypeMap	pcap/pcapDump.c	/^char *haConfigTypeMap[5]={$/;"	v
haFlags	pcap/ha.h	/^	uint32	haFlags;$/;"	m	struct:HaShapHeartbeatBase
haGroup	pcap/ha.h	/^	uint32	haGroup;$/;"	m	struct:HaShapHeartbeatBase
haStateMap	pcap/pcapDump.c	/^char *haStateMap[10]={$/;"	v
haTypeMap	pcap/pcapDump.c	/^char *haTypeMap[20]={$/;"	v
head	dList.h	/^	dListNode *head;$/;"	m	struct:_dListLink
head	list.h	/^	listNode *head;$/;"	m	struct:_list
headerVersion	pcap/ha.h	/^	uint8 	headerVersion:4,$/;"	m	struct:HaShapHeader
hwModuleInfo	pcap/ha.h	/^	uint8 	hwModuleInfo; \/*hardwareId is stale now*\/$/;"	m	struct:HaShapHeartbeatBase
lastLinkChgIfNum	pcap/ha.h	/^	uint8	lastLinkChgIfNum;$/;"	m	struct:HaShapHeartbeatBase
lastLinkChgStatusInfo	pcap/ha.h	/^	uint8	lastLinkChgStatusInfo;$/;"	m	struct:HaShapHeartbeatBase
len	pcap/pcap.h	/^	bpf_u_int32 len;$/;"	m	struct:pcap_header
length	pcap/ha.h	/^	uint16	length;$/;"	m	struct:HaShapHeader
linktype	pcap/pcap.h	/^	bpf_u_int32 linktype;  $/;"	m	struct:pcap_file_header
listDeleteNext	list.c	/^int listDeleteNext(List *list, listNode *p, void **data)$/;"	f
listDestory	list.c	/^int listDestory(List *list)$/;"	f
listInit	list.c	/^List *listInit()$/;"	f
listInsertNext	list.c	/^int listInsertNext(List *list, listNode *p, const void *data)$/;"	f
listNode	list.h	/^}listNode;$/;"	t	typeref:struct:_listNode
listPrint	list.c	/^void listPrint(List *list)$/;"	f
listRemove	list.c	/^void listRemove(List *list, removeFn shouldRemove)$/;"	f
listSize	list.c	/^int listSize(List *list)$/;"	f
listTest	test.c	/^void listTest(void)$/;"	f
magic	pcap/pcap.h	/^	bpf_u_int32 magic;$/;"	m	struct:pcap_file_header
main	networkTest/start.c	/^int main(int argc, char* argv[])$/;"	f
main	pcap/pcapParse.c	/^int main(int argc, char *argv[])$/;"	f
main	test.c	/^int main()$/;"	f
minorHbVersion	pcap/ha.h	/^	uint8 	minorHbVersion;$/;"	m	struct:HaShapHeartbeatBase
myFree	memory.c	/^void myFree(void **p)$/;"	f
myMalloc	memory.c	/^void *myMalloc(int size)$/;"	f
myPrintf	debug.h	/^#define myPrintf(/;"	d
name	test.c	/^char *name[5] = {"Eric", "Spiller", "Aaron", "Amos", "Terry"};$/;"	v
next	dList.h	/^	struct _dListNode *next;$/;"	m	struct:_dListNode	typeref:struct:_dListNode::_dListNode
next	list.h	/^	struct listNode* next;$/;"	m	struct:_listNode	typeref:struct:_listNode::listNode
nodeCount	dList.h	/^	int nodeCount;$/;"	m	struct:_dListLink
numTlvs	pcap/ha.h	/^	uint8 	numTlvs;$/;"	m	struct:HaShapHeartbeatBase
pcap_file_header	pcap/pcap.h	/^typedef struct pcap_file_header {$/;"	s
pcap_file_header	pcap/pcap.h	/^}pcap_file_header;$/;"	t	typeref:struct:pcap_file_header
pcap_header	pcap/pcap.h	/^ }pcap_header;$/;"	t	typeref:struct:pcap_header
pcap_header	pcap/pcap.h	/^typedef struct pcap_header{$/;"	s
pcaptest_pcap_h	pcap/pcap.h	/^#define pcaptest_pcap_h$/;"	d
prefsTimeStampHigh	pcap/ha.h	/^	uint32	prefsTimeStampHigh;$/;"	m	struct:HaShapHeartbeatBase
prefsTimeStampLow	pcap/ha.h	/^	uint32	prefsTimeStampLow;$/;"	m	struct:HaShapHeartbeatBase
prev	dList.h	/^	struct _dListNode *prev;$/;"	m	struct:_dListNode	typeref:struct:_dListNode::_dListNode
printHelp	pcap/pcapParse.c	/^void printHelp(void)$/;"	f
printStatics	pcap/pcapDump.c	/^void printStatics(void)$/;"	f
priority	pcap/ha.h	/^	uint8	priority;$/;"	m	struct:HaShapHeartbeatBase
queueDequeue	queue.c	/^int queueDequeue(Queue *queue, void **data)$/;"	f
queueDestory	queue.c	/^int queueDestory(Queue* queue)$/;"	f
queueEnqueue	queue.c	/^int queueEnqueue(Queue *queue, void *data)$/;"	f
queueInit	queue.c	/^Queue *queueInit()$/;"	f
queuePeek	queue.c	/^void *queuePeek(Queue *queue)$/;"	f
queueSize	queue.c	/^int queueSize(Queue *queue)$/;"	f
queueTest	test.c	/^void queueTest(void)$/;"	f
randomNum	pcap/ha.h	/^	uint32	randomNum;$/;"	m	struct:HaShapHeartbeatBase
removeFn	list.h	/^typedef int (* removeFn)(void *data);$/;"	t
shouldRemove	list.c	/^int shouldRemove(void *data)\/*If the data is odd return true*\/$/;"	f
sigfigs	pcap/pcap.h	/^	bpf_u_int32 sigfigs;   $/;"	m	struct:pcap_file_header
size	list.h	/^	int size;$/;"	m	struct:_list
snaplen	pcap/pcap.h	/^	bpf_u_int32 snaplen;   $/;"	m	struct:pcap_file_header
ssh	myScript/mySsh.pl	/^sub ssh{$/;"	s
stableLinkWeight	pcap/ha.h	/^	uint32	stableLinkWeight;$/;"	m	struct:HaShapHeartbeatBase
stackDestory	stack.c	/^int stackDestory(Stack *stack)$/;"	f
stackInit	stack.c	/^Stack* stackInit()$/;"	f
stackPeek	stack.c	/^void* stackPeek(Stack *stack)$/;"	f
stackPop	stack.c	/^int stackPop(Stack *stack, void **data)$/;"	f
stackPush	stack.c	/^int stackPush(Stack *stack, const void *data)$/;"	f
stackSize	stack.c	/^int stackSize(Stack *stack)$/;"	f
stackTest	test.c	/^void stackTest(void)$/;"	f
state	pcap/ha.h	/^	uint8	state;$/;"	m	struct:HaShapHeartbeatBase
statics	pcap/pcapDump.c	/^int statics[MAX_HA_TYPE] = {0};$/;"	v
svrrpNodeId	pcap/ha.h	/^	uint8	svrrpNodeId;$/;"	m	struct:HaShapHeader
tail	dList.h	/^	dListNode *tail;$/;"	m	struct:_dListLink
tail	list.h	/^	listNode *tail;$/;"	m	struct:_list
thiszone	pcap/pcap.h	/^	bpf_int32 thiszone;    $/;"	m	struct:pcap_file_header
timestamp	pcap/pcap.h	/^typedef struct  timestamp{$/;"	s
timestamp	pcap/pcap.h	/^}timestamp;$/;"	t	typeref:struct:timestamp
timestamp_ms	pcap/pcap.h	/^	bpf_u_int32 timestamp_ms;$/;"	m	struct:timestamp
timestamp_s	pcap/pcap.h	/^	bpf_u_int32 timestamp_s;$/;"	m	struct:timestamp
true	type.h	/^#define true /;"	d
ts	pcap/pcap.h	/^ 	timestamp ts;$/;"	m	struct:pcap_header
type	pcap/ha.h	/^	uint8	type;$/;"	m	struct:HaShapHeader
u_short	pcap/pcap.h	/^typedef unsigned short  u_short;$/;"	t
uint16	pcap/pcap.h	/^typedef unsigned short uint16;$/;"	t
uint32	pcap/pcap.h	/^typedef int uint32;$/;"	t
uint8	pcap/pcap.h	/^typedef unsigned char uint8;   $/;"	t
unstableLinkWeight	pcap/ha.h	/^	uint32	unstableLinkWeight; \/*BR: Added Unstable link weight in the heartbeat message *\/$/;"	m	struct:HaShapHeartbeatBase
version	pcap/ha.h	/^	uint8	version; \/* This is same as Heartbeat version refered in the code*\/$/;"	m	struct:HaShapHeader
version_major	pcap/pcap.h	/^	u_short version_major;$/;"	m	struct:pcap_file_header
version_minor	pcap/pcap.h	/^	u_short version_minor;$/;"	m	struct:pcap_file_header
